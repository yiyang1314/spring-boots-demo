<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
	<classPathEntry
		location="C:/Users/tangyang/.m2/repository/mysql/mysql-connector-java/8.0.15/mysql-connector-java-8.0.15-sources.jar" />
	<!--如果你希望不生成和Example查询有关的内容，那么可以按照如下进行配置: targetRuntime="MyBatis3Simple" -->
	<context id="context" targetRuntime="MyBatis3Simple">
		<plugin type="tk.mybatis.mapper.generator.MapperPlugin">
			<property name="mappers"
				value="tk.mybatis.mapper.common.Mapper" />
			<property name="caseSensitive" value="true" />
		</plugin>
		<commentGenerator>
			<!--是否去除生成的自动注解（英文的） true是去除 false 不去除 -->
			<property name="suppressAllComments" value="true" />
			<!-- 是否去除自动生成的日期 true：是 ： false:否 -->
			<property name="suppressDate" value="true" />
		</commentGenerator>

		<jdbcConnection userId="root" password=""
			driverClass="com.mysql.cj.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/test?useSSL=false" />
		<!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal; 
			scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 
			和 NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!-- !!!! Model Configurations !!!! -->
		<!--生成POJO类的位置 -->
		<javaModelGenerator
			targetPackage="com.boot.pool"
			targetProject="src/main/java">
			<property name="enableSubPackages" value="false" />
			<!-- 从数据库返回的值被清理前后的空格 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- !!!! Mapper XML Configurations !!!! -->
		<!--生成映射文件xml的位置 -->

		<sqlMapGenerator targetPackage="com.boot.pool"
			targetProject="src/main/resources">
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>


		<!-- !!!! Mapper Interface Configurations !!!! -->
		<!--mapper.xml 接口生成的位置 -->

		<javaClientGenerator
			targetPackage="com.boot.pool" type="XMLMAPPER"
			targetProject="src/main/java">
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- schema即为数据库名, tableName为数据库中的对应的数据库表名或视图名, domainObjectName是要生成的实体类名, 
			如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true, 这样就会生成一个对应domainObjectName的Example类, 
			enableCountByExample等设为false时, 就不会生成对应的Example类了. table其他属性： enableCountByExample="false" 
			enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" 
			selectByExampleQueryId="false" 如果table里边不配置property，默认字段都生成为类属性。 <ignoreColumn 
			column="FRED" />//忽略字段 <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" 
			/>//无论字段是什么类型，生成的类属性都是varchar。 -->
		<!-- !!!! Table Configurations !!!! -->
		<!-- 下面这个是生成该数据库下的所有的数据表的 -->
		<table schema="public" tableName="user"
			enableCountByExample="false" enableDeleteByExample="false"
			enableSelectByExample="false" enableUpdateByExample="false" />
	</context>
</generatorConfiguration>
